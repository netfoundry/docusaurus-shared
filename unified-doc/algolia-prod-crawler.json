new Crawler({
  appId: "YOUR_APP_ID",
  apiKey: "YOUR_API_KEY",
  rateLimit: 8,
  maxDepth: 10,

  schedule: "on monday, wednesday, friday",
  startUrls: ["https://netfoundry.io/docs/"],
  ignoreCanonicalTo: true,
  sitemaps: ["https://netfoundry.io/docs/sitemap.xml"],
  discoveryPatterns: ["https://netfoundry.io/docs/**"],
  actions: [
    {
      indexName: "nfdocs_prod",
      pathsToMatch: ["https://netfoundry.io/**"],
      recordExtractor: ({ $, helpers }) => {
      const lvl0 =
      $(
      ".menu__link.menu__link--sublist.menu__link--active, .navbar__item.navbar__link--active",
      )
      .last()
      .text() || "Documentation";

      const records = helpers.docsearch({
      recordProps: {
        lvl0: { selectors: "", defaultValue: lvl0 },
        lvl1: ["header h1", "article h1"],
        lvl2: "article h2",
        lvl3: "article h3",
        lvl4: "article h4",
        lvl5: "article h5, article td:first-child",
        lvl6: "article h6",
        content: "article p, article li, article td:last-child",
        url: { selectors: [] },
        selectors_exclude: [
          ".navbar",
          ".footer",
          ".menu",
          ".theme-doc-toc-desktop",
          ".theme-doc-footer",
          ".hash-link",
          ".breadcrumbs"
        ]
      },
      indexHeadings: true,
      aggregateContent: true,
      recordVersion: "v3"
    });

    return records.map((rec) => {
      rec.product = "unknown";
      if (rec.url_without_anchor.includes("/docs/frontdoor"))
      rec.product = "frontdoor";
      else if (rec.url_without_anchor.includes("/docs/openziti"))
      rec.product = "openziti";
      else if (rec.url_without_anchor.includes("/docs/onprem"))
      rec.product = "onprem";
      else if (rec.url_without_anchor.includes("/docs/zlan"))
      rec.product = "zlan";
      return rec;
    });
  }
  }
  ],
  initialIndexSettings: {
    nfdocs_prod: {
      attributesForFaceting: [
        "type",
        "lang",
        "language",
        "version",
        "docusaurus_tag",
        "searchable(product)",
      ],
      attributesToRetrieve: [
        "hierarchy",
        "content",
        "anchor",
        "url",
        "url_without_anchor",
        "url_without_variables",
        "type",
        "product",
        "title"
      ],
      attributesToHighlight: ["hierarchy", "content", "title"],
      attributesToSnippet: ["content:30"],
      camelCaseAttributes: ["hierarchy", "content"],
      searchableAttributes: [
        "content",
        "unordered(hierarchy.lvl0)",
        "unordered(hierarchy.lvl1)",
        "unordered(hierarchy.lvl2)",
        "unordered(hierarchy.lvl3)",
        "unordered(hierarchy.lvl4)",
        "unordered(hierarchy.lvl5)",
        "unordered(hierarchy.lvl6)",
      ],
      distinct: true,
      attributeForDistinct: "url",
      customRanking: [
        "desc(weight.pageRank)",
        "asc(weight.level)",
        "asc(weight.position)",
      ],
      ranking: [
        "words",
        "filters",
        "typo",
        "attribute",
        "proximity",
        "exact",
        "custom",
      ],
      disableTypoToleranceOnAttributes: ["hierarchy.lvl0", "hierarchy.lvl1"],
      highlightPreTag:
      '<span class="algolia-docsearch-suggestion--highlight">',
      highlightPostTag: "</span>",
      minWordSizefor1Typo: 3,
      minWordSizefor2Typos: 7,
      allowTyposOnNumericTokens: false,
      minProximity: 1,
      ignorePlurals: true,
      advancedSyntax: true,
      attributeCriteriaComputedByMinProximity: true,
      removeWordsIfNoResults: "allOptional",
      separatorsToIndex: "_"
    }
  }
});